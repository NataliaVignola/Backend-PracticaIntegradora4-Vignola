const supertest = require('supertest');
const app = require('../app');
const {
    expect
} = require('chai');

describe('Session Routes', () => {
    it('should return the current user', async () => {
        // Simula una solicitud para obtener el usuario actual
        const res = await supertest(app).get('/api/sessions/current');
        expect(res.status).to.equal(200);
        expect(res.body).to.have.property('user');
    });

    it('should handle user signup', async () => {
        // Simula una solicitud para registrarse
        const userData = {
            email: 'test@example.com',
            password: 'testpassword',
        };

        const res = await supertest(app)
            .post('/auth/register')
            .send(userData);

        expect(res.status).to.equal(302); // Redirección exitosa después del registro
        // Añade más aserciones según sea necesario
    });

    it('should handle user login', async () => {
        // Simula una solicitud para iniciar sesión
        const userData = {
            email: 'test@example.com',
            password: 'testpassword',
        };

        const res = await supertest(app)
            .post('/auth/login')
            .send(userData);

        expect(res.status).to.equal(302); // Redirección exitosa después del inicio de sesión
        // Añade más aserciones según sea necesario
    });

    it('should handle user logout', async () => {
        // Simula una solicitud para cerrar sesión
        const res = await supertest(app).get('/auth/logout');
        expect(res.status).to.equal(302); // Redirección exitosa después del cierre de sesión
    });
});
